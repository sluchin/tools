diff --color -uprN zlib-1.2.12_orig/gzclose.c zlib-1.2.12/gzclose.c
--- zlib-1.2.12_orig/gzclose.c	2010-02-14 09:12:48.000000000 +0900
+++ zlib-1.2.12/gzclose.c	2022-04-10 21:11:22.407314003 +0900
@@ -11,6 +11,8 @@
 int ZEXPORT gzclose(file)
     gzFile file;
 {
+    fprintf(stderr, "%s: begin\n", __FUNCTION__);
+
 #ifndef NO_GZCOMPRESS
     gz_statep state;
 
@@ -18,8 +20,13 @@ int ZEXPORT gzclose(file)
         return Z_STREAM_ERROR;
     state = (gz_statep)file;
 
-    return state->mode == GZ_READ ? gzclose_r(file) : gzclose_w(file);
+
+    int retval = state->mode == GZ_READ ? gzclose_r(file) : gzclose_w(file);
+    fprintf(stderr, "%s: end\n", __FUNCTION__);
+    return retval;
 #else
-    return gzclose_r(file);
+    int retval =  gzclose_r(file);
+    fprintf(stderr, "%s: end\n", __FUNCTION__);
+    return retval;
 #endif
 }
diff --color -uprN zlib-1.2.12_orig/gzread.c zlib-1.2.12/gzread.c
--- zlib-1.2.12_orig/gzread.c	2022-03-28 08:39:42.000000000 +0900
+++ zlib-1.2.12/gzread.c	2022-04-10 21:14:09.724834906 +0900
@@ -628,6 +628,7 @@ int ZEXPORT gzclose_r(file)
     int ret, err;
     gz_statep state;
 
+    fprintf(stderr, "%s: begin\n", __FUNCTION__);
     /* get internal structure */
     if (file == NULL)
         return Z_STREAM_ERROR;
@@ -648,5 +649,6 @@ int ZEXPORT gzclose_r(file)
     free(state->path);
     ret = close(state->fd);
     free(state);
+    fprintf(stderr, "%s: end\n", __FUNCTION__);
     return ret ? Z_ERRNO : err;
 }
diff --color -uprN zlib-1.2.12_orig/gzwrite.c zlib-1.2.12/gzwrite.c
--- zlib-1.2.12_orig/gzwrite.c	2022-03-28 08:39:42.000000000 +0900
+++ zlib-1.2.12/gzwrite.c	2022-04-11 00:20:57.332152328 +0900
@@ -26,6 +26,7 @@ local int gz_init(state)
         gz_error(state, Z_MEM_ERROR, "out of memory");
         return -1;
     }
+    fprintf(stderr, "state->in=%p, malloc(%u)\n", state->in, state->want << 1);
 
     /* only need output buffer and deflate state if compressing */
     if (!state->direct) {
@@ -36,6 +37,7 @@ local int gz_init(state)
             gz_error(state, Z_MEM_ERROR, "out of memory");
             return -1;
         }
+        fprintf(stderr, "state->out=%p, malloc(%u)\n", state->out, state->want);
 
         /* allocate deflate memory, set up for gzip compression */
         strm->zalloc = Z_NULL;
@@ -49,11 +51,13 @@ local int gz_init(state)
             gz_error(state, Z_MEM_ERROR, "out of memory");
             return -1;
         }
+        fprintf(stderr, "deflateInit2: state->strategy=%u\n", state->strategy);
         strm->next_in = NULL;
     }
 
     /* mark state as initialized */
     state->size = state->want;
+    fprintf(stderr, "state->size=%u\n", state->size);
 
     /* initialize write buffer if compressing */
     if (!state->direct) {
@@ -78,12 +82,17 @@ local int gz_comp(state, flush)
     unsigned have, put, max = ((unsigned)-1 >> 2) + 1;
     z_streamp strm = &(state->strm);
 
+    fprintf(stderr, "%s: begin\n", __FUNCTION__);
+    fprintf(stderr, "max=0x%x(%u) (unsigned)-1=0x%x(%u)\n",
+        max, max, (unsigned)-1, (unsigned)-1);
+
     /* allocate memory if this is the first time through */
     if (state->size == 0 && gz_init(state) == -1)
         return -1;
 
     /* write directly if requested */
     if (state->direct) {
+        fprintf(stderr, "state->direct\n");
         while (strm->avail_in) {
             put = strm->avail_in > max ? max : strm->avail_in;
             writ = write(state->fd, strm->next_in, put);
@@ -99,6 +108,7 @@ local int gz_comp(state, flush)
 
     /* check for a pending reset */
     if (state->reset) {
+        fprintf(stderr, "state->reset\n");
         /* don't start a new gzip member unless there is data to write */
         if (strm->avail_in == 0)
             return 0;
@@ -108,6 +118,8 @@ local int gz_comp(state, flush)
 
     /* run deflate() on provided input until it produces no more output */
     ret = Z_OK;
+    fprintf(stderr, "do-while: begin\n");
+    unsigned long count = 0;
     do {
         /* write out current buffer contents if full, or if flushing, but if
            doing Z_FINISH then don't write until we get to Z_STREAM_END */
@@ -117,6 +129,7 @@ local int gz_comp(state, flush)
                 put = strm->next_out - state->x.next > (int)max ? max :
                       (unsigned)(strm->next_out - state->x.next);
                 writ = write(state->fd, state->x.next, put);
+                fprintf(stderr, "write(%p): writ=%d\n", state->x.next, writ);
                 if (writ < 0) {
                     gz_error(state, Z_ERRNO, zstrerror());
                     return -1;
@@ -130,6 +143,10 @@ local int gz_comp(state, flush)
             }
         }
 
+        unsigned long save_total_in = strm->total_in;
+        unsigned long save_total_out = strm->total_out;
+        fprintf(stderr, "before(%lu): avail_in=%u, avail_out=%u, total_in=%lu, total_out=%lu\n",
+            count, strm->avail_in, strm->avail_out, strm->total_in, strm->total_out);
         /* compress */
         have = strm->avail_out;
         ret = deflate(strm, flush);
@@ -139,7 +156,15 @@ local int gz_comp(state, flush)
             return -1;
         }
         have -= strm->avail_out;
+        fprintf(stderr,
+            "after(%lu): avail_in=%u, avail_out=%u, total_in=%lu(+%lu), " \
+            "total_out=%lu(+%lu), have=%u\n",
+            count, strm->avail_in, strm->avail_out,
+            strm->total_in, (strm->total_in - save_total_in),
+            strm->total_out, (strm->total_out - save_total_out), have);
+        count += 1;
     } while (have);
+    fprintf(stderr, "do-while: end\n");
 
     /* if that completed a deflate stream, allow another to start */
     if (flush == Z_FINISH)
@@ -191,6 +216,8 @@ local z_size_t gz_write(state, buf, len)
 {
     z_size_t put = len;
 
+    fprintf(stderr, "%s: begin\n", __FUNCTION__);
+
     /* if len is zero, avoid unnecessary operations */
     if (len == 0)
         return 0;
@@ -247,6 +274,8 @@ local z_size_t gz_write(state, buf, len)
         } while (len);
     }
 
+    fprintf(stderr, "%s: end\n", __FUNCTION__);
+
     /* input was all buffered or compressed */
     return put;
 }
@@ -642,6 +671,8 @@ int ZEXPORT gzclose_w(file)
     int ret = Z_OK;
     gz_statep state;
 
+    fprintf(stderr, "%s: begin\n", __FUNCTION__);
+
     /* get internal structure */
     if (file == NULL)
         return Z_STREAM_ERROR;
@@ -673,5 +704,7 @@ int ZEXPORT gzclose_w(file)
     if (close(state->fd) == -1)
         ret = Z_ERRNO;
     free(state);
+    fprintf(stderr, "%s: end\n", __FUNCTION__);
+
     return ret;
 }
