#!/bin/sh

progname=`dirname $0`

EXIT_SUCCESS=0
EXIT_FAILURE=1

# DB information
#HOSTNAME="localhost:27017"
HOSTNAME="localhost:27055" # default
[ -n "${MONGO_URL}" ] && HOSTNAME="${MONGO_URL}"
DBNAME="mmp"
prefix="trace"
db_query_size=300 # default
[ -n "${SHELL_BATCH_SIZE}" ] && db_query_size="${SHELL_BATCH_SIZE}"

# command
#mongo="echo"
#mongofiles="echo"
mongo="mongo"
mongofiles="mongofiles"

# mongo arguments
mongo_args="--quiet --host='$HOSTNAME'"

test_command()
{
    found=1
    for cmd in "$@"
    do
        which $cmd > /dev/null 2>&1
        if [ $? -ne 0 ]; then
            echo "$cmd command not found"
            found=0
        fi
    done
    if [ "$found" -eq 0 ]; then
        exit $EXIT_FAILURE
    fi
    return
}

test_optarg()
{
    option=$1
    optarg=$2

    first=`echo x$optarg | cut -b 2-2`
    if [ "x$first" = x- ]; then
        echo "$progname: option requires an argument -- $option"
        exit $EXIT_FAILURE
    fi
    return
}

test_arg_type()
{
    arg=$1

    if [ -z $arg ]; then
        return
    fi

    if [ $arg -lt 1 ] || [ $arg -gt 3 ]; then
        echo "invalid type: type=$arg"
        exit $EXIT_FAILURE
    fi
    return
}

test_arg_date()
{
    arg=$1

    if [ -z $arg ]; then
        return
    fi

    # Check count of string
    count=`echo -n $arg | wc -c`
    if [ "$count" -ne 8 ]; then
        echo "invalid date $arg"
        exit $EXIT_FAILURE
    fi

    # Check string of date
    date -d "$arg" > /dev/null
    if [ "$?" -ne 0 ]; then
        exit $EXIT_FAILURE
    fi
    return
}

test_arg_start_end()
{
    start=$1
    end=$2

    if [ -z $start ] || [ -z $end ]; then
        return
    fi

    if [ "$end" -lt "$start"]; then
        echo "Invalid arguments: start=$start, end=$end"
        exit $EXIT_FAILURE
    fi
    return
}

display_list()
{
    $mongo --quiet --host="$HOSTNAME" $DBNAME --eval "DBQuery.shellBatchSize=$db_query_size;db.$prefix.files.find({},{\"_id\":0,\"filename\":1})" | while read line
    do
        if [ -n "$line" ]; then
            echo $line | while read json
            do
                if [ "$json" != "Type \"it\" for more" ]; then
                    echo $json | awk '/"filename"/{print $4}' | sed 's/^.*"\(.*\)".*$/\1/'
                fi
            done
        fi
    done
    return
}

delete_log_by_file()
{
    filename=$1

    OLDIFS=$IFS
    IFS=,
    set -- $filename
    for file in $@
    do
        $mongofiles --quiet --host="$HOSTNAME" --db="$DBNAME" --prefix="$prefix" delete $file
    done
    IFS=$OLDIFS
    return
}

delete_all()
{
    while :
    do
        echo -n "Delete all. Is it OK ? (Y/n) "
        read input
        case "$input" in
            [Yy]|[Yy][Ee][Ss]) break ;;
            [Nn]|[Nn][Oo]) exit $EXIT_FAILURE ;;
        esac
    done

    $mongo --quiet --host="$HOSTNAME" $DBNAME --eval "DBQuery.shellBatchSize=$db_query_size;db.$prefix.files.find({},{\"_id\":0,\"filename\":1})" | while read line
    do
        if [ -n "$line" ]; then
            echo $line | while read json
            do
                if [ "$json" != "Type \"it\" for more" ]; then
                    echo $json | awk '/"filename"/{print $4}' | sed 's/^.*"\(.*\)".*$/\1/' | while read file
                    do
                        $mongofiles --quiet --host="$HOSTNAME" --db="$DBNAME" --prefix=$prefix delete $file
                    done
                fi
            done
        else
            echo "there are no files to delete"
            exit $EXIT_FAILURE
        fi
    done
    return
}

get_file_by_file()
{
    filename=$1
    OLDIFS=$IFS
    IFS=,
    set -- $filename
    for file in $@
    do
        $mongofiles --quiet --host="$HOSTNAME" --db="$DBNAME" --prefix=$prefix get $file
    done
    IFS=$OLDIFS
    return
}

get_file_from_start_to_end_by_type()
{
    arg=$1

    # Split the argument with a comma
    OLDIFS=$IFS
    IFS=,
    set -- $arg
    start=$1
    end=$2
    type=$3
    IFS=$OLDIFS

    # Check arguments
    test_arg_type $typ
    test_arg_date $str
    test_arg_date $end
    test_arg_start_end $str $end

    # Make query string
    query="{"
    if [ -n "$str" ] || [ -n "$end" ]; then
        query="\"metadate.datetime\":{"
        if [ -n "$str" ]; then
            query=$query"\"\$gte\":ISODate($str),"
        fi
        if [ -n "$end" ]; then
            query=$query"\"\$lte\":ISODate($end),"
        fi
        query=`echo $query | sed 's/,$//'` # delete comma
        query=$query"},"
    fi
    if [ -n "$typ" ]; then
        query=$query"\"metadate.type\":$typ},"
    fi
    query=$query"{\"_id\":0,\"filename\":1}"

    $mongo --quiet --host="$HOSTNAME" $DBNAME --eval "DBQuery.shellBatchSize=$db_query_size;db.$prefix.files.find($query)" | while read line
    do
        if [ -n "$line" ]; then
            echo $line | while read $json
            do
                if [ "$json" != "Type \"it\" for more" ]; then
                    echo $json | awk '/"filename"/{print $4}' | sed 's/^.*"\(.*\)".*$/\1/' | while read $file
                    do
                        $mongofiles --quiet --host="$HOSTNAME" --db="$DBNAME" --prefix="$prefix" get $file
                    done
                fi
            done
        else
            echo "there is no file: start=$start, end=$end"
        fi
    done
    return
}

display_help()
{
cat <<EOF
Tracer data log acquisition tool

Usage:
    -l
                View file list
    -d    filename[,filename,…]
                Delete by specifying the file name
    -D
                Delete all logs
    -o    filename[,filename,…]
                Transfer by specifying a file name
    -t    type
                Transfer by specifying the type
    -s    YYYYMMDD
                Transfer by specifying the start date and time
    -e    YYYYMMDD
                Transfer by specifying the end date and time
EOF
    return
}

# Check the existance of command
test_command $mongo $mongofiles

if [ "$#" -ne 0 ]; then

    s_opt=""; e_opt=""; t_opt=""
    while getopts ld:Do:t:s:e:h opt
    do
        case $opt in
            "l")
                display_list
                ;;
            "d")
                d_opt=$OPTARG
                test_optarg "d" "$d_opt"
                delete_log_by_file $d_opt
                ;;
            "D")
                delete_all
                ;;
            "o")
                o_opt=$OPTARG
                test_optarg "o" "$o_opt"
                get_file_by_file $o_opt
                ;;
            "t")
                t_opt=$OPTARG
                test_optarg "t" "$t_opt"
                ;;
            "s")
                s_opt=$OPTARG
                test_optarg "s" "$s_opt"
                ;;
            "e")
                e_opt=$OPTARG
                test_optarg "e" "$e_opt"
                ;;
            "h")
                display_help
                ;;
            :)
                display_help
                exit $EXIT_FAILURE
                ;;
            *)
                # Debug
                opt=$1
                shift
                optarg=$@
                echo "opt=$opt optarg=$optarg"
                if [ "x$opt" = "x-f" ]; then
                    for file in $optarg
                    do
                        cur=`pwd`
                        if [ -d "`dirname $file`" ]; then
                            cd `dirname $file`
                        fi
                        if [ -f "`basename $file`" ]; then
                            echo "file=`basename $file`"
                            echo $mongofiles --quiet --host="$HOSTNAME" --db="$DBNAME" --prefix=$prefix put `basename $file`
                            $mongofiles --quiet --host="$HOSTNAME" --db="$DBNAME" --prefix=$prefix put `basename $file`
                            echo $mongo --quiet --host="$HOSTNAME" $DBNAME --eval "DBQuery.shellBatchSize=$db_query_size;db.$prefix.files.update({\"filename\":\"`basename $file`\"},{"\$set":{\"metadata.type\":1,\"metadata.datetime\":ISODate()}})"
                            $mongo --quiet --host="$HOSTNAME" $DBNAME --eval "DBQuery.shellBatchSize=$db_query_size;db.$prefix.files.update({\"filename\":\"`basename $file`\"},{"\$set":{\"metadata.type\":1,\"metadata.datetime\":ISODate()}})"
                            #$mongo --quiet --host="$HOSTNAME" $DBNAME --eval "DBQuery.shellBatchSize=$db_query_size;db.$prefix.files.update({\"filename\":\"`basename $file`\"},{"\$set":{\"metadata.type\":2,\"metadata.datetime\":ISODate()}})"
                            #$mongo --quiet --host="$HOSTNAME" $DBNAME --eval "DBQuery.shellBatchSize=$db_query_size;db.$prefix.files.update({\"filename\":\"`basename $file`\"},{"\$set": \"metadata.type\":3,\"metadata.datetime\":ISODate()}})"
                        fi
                        cd $cur
                    done
                fi
                cd $cur
                display_help
                exit $EXIT_FAILURE
                ;;
        esac
    done

    if [ -n "$s_opt" ] || [ -n "$e_opt" ] || [ -n "$t_opt" ]; then
        get_file_from_start_to_end_by_type "$s_opt,$e_opt,$t_opt"
    fi
else

    # Interactive shell
    echo "Interactive shell: $#"

fi

exit $EXIT_SUCCESS
