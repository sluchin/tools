diff -uprN iperf-2.0.9.orig/compat/Thread.c iperf-2.0.9/compat/Thread.c
--- iperf-2.0.9.orig/compat/Thread.c	2016-06-07 03:48:21.000000000 +0900
+++ iperf-2.0.9/compat/Thread.c	2017-02-09 16:02:28.640883999 +0900
@@ -78,6 +78,12 @@
 extern "C" {
 #endif
 
+#ifdef _DEBUG
+#define DEBUGP(fmt, ...)    printf(fmt, ## __VA_ARGS__)
+#else
+#define DEBUGP(fmt, ...)
+#endif
+
 /* -------------------------------------------------------------------
  * define static variables.
  * ------------------------------------------------------------------- */
@@ -187,7 +193,11 @@ void thread_stop( struct thread_Settings
         if ( thread_equalid( thread_getid(), thread->mTID ) ) {
 
             // Destroy the object
-            Settings_Destroy( thread );
+            if (thread != NULL) {
+                DEBUGP("%s[%d]: Settings_Destroy: %p\n", __FILE__, (int)__LINE__, thread);
+                Settings_Destroy( thread );
+                thread = NULL;
+            }
 
             // Exit
 #if   defined( HAVE_POSIX_THREAD )
@@ -211,7 +221,11 @@ void thread_stop( struct thread_Settings
 #endif
 
             // Destroy the object only after killing the thread
-            Settings_Destroy( thread );
+            if (thread != NULL) {
+                DEBUGP("%s[%d]: Settings_Destroy: %p\n", __FILE__, (int)__LINE__, thread);
+                Settings_Destroy( thread );
+                thread = NULL;
+            }
         }
     }
 #endif
@@ -280,7 +294,11 @@ thread_run_wrapper( void* paramPtr ) {
     }
 
     // Destroy this thread object
-    Settings_Destroy( thread );
+    if (thread != NULL) {
+        DEBUGP("%s[%d]: Settings_Destroy: %p\n", __FILE__, (int)__LINE__, thread);
+        Settings_Destroy( thread );
+        thread = NULL;
+    }
 
     return 0;
 } // end run_wrapper
diff -uprN iperf-2.0.9.orig/include/Settings.hpp iperf-2.0.9/include/Settings.hpp
--- iperf-2.0.9.orig/include/Settings.hpp	2016-06-07 03:48:21.000000000 +0900
+++ iperf-2.0.9/include/Settings.hpp	2017-02-09 09:17:50.222486999 +0900
@@ -156,7 +156,7 @@ typedef struct thread_Settings {
         bool   mNoServerReport;         // -x 
         bool   mNoMultReport;           // -x m
         bool   mSinlgeClient;           // -1 */
-    int flags; 
+    unsigned int flags; 
     // enums (which should be special int's)
     ThreadMode mThreadMode;         // -s or -c
     ReportMode mReportMode;
@@ -173,7 +173,7 @@ typedef struct thread_Settings {
     unsigned short mBindPort;      // -B 
     // chars
     char   mFormat;                 // -f
-    int mTTL;                    // -T
+    unsigned int mTTL;                    // -T
     char pad1[2];
     // structs or miscellaneous
     iperf_sockaddr peer;
@@ -321,11 +321,11 @@ typedef struct thread_Settings {
 // use int32_t if possible, otherwise a 32 bit bitfield (e.g. on J90) 
 typedef struct UDP_datagram {
 #ifdef HAVE_INT32_T
-    int32_t id;
+    uint32_t id;
     u_int32_t tv_sec;
     u_int32_t tv_usec;
 #else
-    signed   int id      : 32;
+    unsigned int id      : 32;
     unsigned int tv_sec  : 32;
     unsigned int tv_usec : 32;
 #endif
@@ -354,25 +354,25 @@ typedef struct client_hdr {
      * tradeoff modes, wheither the speaker needs to start 
      * immediately or after the audience finishes.
      */
-    int32_t flags;
-    int32_t numThreads;
-    int32_t mPort;
-    int32_t bufferlen;
-    int32_t mWindowSize;
-    int32_t mAmount;
-    int32_t mRate;
-    int32_t mUDPRateUnits;
-    int32_t mRealtime;
+    uint32_t flags;
+    uint32_t numThreads;
+    uint32_t mPort;
+    uint32_t bufferlen;
+    uint32_t mWindowSize;
+    uint32_t mAmount;
+    uint32_t mRate;
+    uint32_t mUDPRateUnits;
+    uint32_t mRealtime;
 #else
-    signed int flags      : 32;
-    signed int numThreads : 32;
-    signed int mPort      : 32;
-    signed int bufferlen  : 32;
-    signed int mWindowSize : 32;
-    signed int mAmount    : 32;
-    signed int mRate      : 32;
-    signed int mUDPRateUnits : 32;
-    signed int mRealtime  : 32;
+    unsigned int flags      : 32;
+    unsigned int numThreads : 32;
+    unsigned int mPort      : 32;
+    unsigned int bufferlen  : 32;
+    unsigned int mWindowSize : 32;
+    unsigned int mAmount    : 32;
+    unsigned int mRate      : 32;
+    unsigned int mUDPRateUnits : 32;
+    unsigned int mRealtime  : 32;
 #endif
 } client_hdr;
 
@@ -395,57 +395,57 @@ typedef struct server_hdr {
      * set signifying additional information. If no 
      * information bits are set then the header is ignored.
      */
-    int32_t flags;
-    int32_t total_len1;
-    int32_t total_len2;
-    int32_t stop_sec;
-    int32_t stop_usec;
-    int32_t error_cnt;
-    int32_t outorder_cnt;
-    int32_t datagrams;
-    int32_t jitter1;
-    int32_t jitter2;
-    int32_t minTransit1;
-    int32_t minTransit2;
-    int32_t maxTransit1;
-    int32_t maxTransit2;
-    int32_t sumTransit1;
-    int32_t sumTransit2;
-    int32_t meanTransit1;
-    int32_t meanTransit2;
-    int32_t m2Transit1;
-    int32_t m2Transit2;
-    int32_t vdTransit1;
-    int32_t vdTransit2;
-    int32_t cntTransit;
-    int32_t IPGcnt;
-    int32_t IPGsum;
+    uint32_t flags;
+    uint32_t total_len1;
+    uint32_t total_len2;
+    uint32_t stop_sec;
+    uint32_t stop_usec;
+    uint32_t error_cnt;
+    uint32_t outorder_cnt;
+    uint32_t datagrams;
+    uint32_t jitter1;
+    uint32_t jitter2;
+    uint32_t minTransit1;
+    uint32_t minTransit2;
+    uint32_t maxTransit1;
+    uint32_t maxTransit2;
+    uint32_t sumTransit1;
+    uint32_t sumTransit2;
+    uint32_t meanTransit1;
+    uint32_t meanTransit2;
+    uint32_t m2Transit1;
+    uint32_t m2Transit2;
+    uint32_t vdTransit1;
+    uint32_t vdTransit2;
+    uint32_t cntTransit;
+    uint32_t IPGcnt;
+    uint32_t IPGsum;
 #else
-    signed int flags        : 32;
-    signed int total_len1   : 32;
-    signed int total_len2   : 32;
-    signed int stop_sec     : 32;
-    signed int stop_usec    : 32;
-    signed int error_cnt    : 32;
-    signed int outorder_cnt : 32;
-    signed int datagrams    : 32;
-    signed int jitter1      : 32;
-    signed int jitter2      : 32;
-    signed int minTransit1  : 32;
-    signed int minTransit2  : 32;
-    signed int maxTransit1  : 32;
-    signed int maxTransit2  : 32;
-    signed int sumTransit1  : 32;
-    signed int sumTransit2  : 32;
-    signed int meanTransit1  : 32;
-    signed int meanTransit2  : 32;
-    signed int m2Transit1  : 32;
-    signed int m2Transit2  : 32;
-    signed int vdTransit1  : 32;
-    signed int vdTransit2  : 32;
-    signed int cntTransit   : 32;
-    signed int IPGcnt       : 32;
-    signed int IPGsum       : 32;
+    unsigned int flags        : 32;
+    unsigned int total_len1   : 32;
+    unsigned int total_len2   : 32;
+    unsigned int stop_sec     : 32;
+    unsigned int stop_usec    : 32;
+    unsigned int error_cnt    : 32;
+    unsigned int outorder_cnt : 32;
+    unsigned int datagrams    : 32;
+    unsigned int jitter1      : 32;
+    unsigned int jitter2      : 32;
+    unsigned int minTransit1  : 32;
+    unsigned int minTransit2  : 32;
+    unsigned int maxTransit1  : 32;
+    unsigned int maxTransit2  : 32;
+    unsigned int sumTransit1  : 32;
+    unsigned int sumTransit2  : 32;
+    unsigned int meanTransit1  : 32;
+    unsigned int meanTransit2  : 32;
+    unsigned int m2Transit1  : 32;
+    unsigned int m2Transit2  : 32;
+    unsigned int vdTransit1  : 32;
+    unsigned int vdTransit2  : 32;
+    unsigned int cntTransit   : 32;
+    unsigned int IPGcnt       : 32;
+    unsigned int IPGsum       : 32;
 #endif
 
 } server_hdr;
diff -uprN iperf-2.0.9.orig/src/Client.cpp iperf-2.0.9/src/Client.cpp
--- iperf-2.0.9.orig/src/Client.cpp	2016-06-07 03:48:21.000000000 +0900
+++ iperf-2.0.9/src/Client.cpp	2017-02-09 11:51:08.842486999 +0900
@@ -68,6 +68,12 @@
 #include <sys/mman.h>
 #endif
 
+#ifdef _DEBUG
+#define DEBUGP(fmt, ...)    printf(fmt, ## __VA_ARGS__)
+#else
+#define DEBUGP(fmt, ...)
+#endif
+
 /* -------------------------------------------------------------------
  * Store server hostname, optionally local hostname, and socket info.
  * ------------------------------------------------------------------- */
@@ -78,6 +84,8 @@ Client::Client( thread_Settings *inSetti
 
     // initialize buffer
     mBuf = new char[ mSettings->mBufLen ];
+    DEBUGP("%s[%d]: new char: %p\n", __FILE__, (int)__LINE__, mBuf);
+
     pattern( mBuf, mSettings->mBufLen );
     if ( isFileInput( mSettings ) ) {
         if ( !isSTDIN( mSettings ) )
@@ -103,7 +111,6 @@ Client::Client( thread_Settings *inSetti
             mSettings->multihdr->report->connection.size_local = mSettings->size_local;
         }
     }
-
 } // end Client
 
 /* -------------------------------------------------------------------
@@ -116,7 +123,12 @@ Client::~Client() {
         WARN_errno( rc == SOCKET_ERROR, "close" );
         mSettings->mSock = INVALID_SOCKET;
     }
-    DELETE_ARRAY( mBuf );
+
+    if (mBuf != NULL) {
+        DEBUGP("%s[%d]: DELETE_PTR: %p\n", __FILE__, (int)__LINE__, mBuf);
+        DELETE_ARRAY( mBuf );
+        mBuf = NULL;
+    }
 } // end ~Client
 
 // const double kSecs_to_usecs = 1e6; 
@@ -154,6 +166,7 @@ void Client::RunRateLimitedTCP ( void )
     // InitReport handles Barrier for multiple Streams
     mSettings->reporthdr = InitReport( mSettings );
     reportstruct = new ReportStruct;
+    DEBUGP("%s[%d]: new ReportStruct: %p\n", __FILE__, (int)__LINE__, reportstruct);
     reportstruct->packetID = 0;
     reportstruct->emptyreport=0;
     reportstruct->socket = mSettings->mSock;
@@ -295,6 +308,8 @@ void Client::RunTCP( void ) {
     // InitReport handles Barrier for multiple Streams
     mSettings->reporthdr = InitReport( mSettings );
     reportstruct = new ReportStruct;
+    DEBUGP("%s[%d]: new ReportStruct: %p\n", __FILE__, (int)__LINE__, reportstruct);
+
     reportstruct->packetID = 0;
     reportstruct->emptyreport=0;
     reportstruct->socket = mSettings->mSock;
@@ -403,7 +418,12 @@ void Client::RunTCP( void ) {
     }
     CloseReport( mSettings->reporthdr, reportstruct );
 
-    DELETE_PTR( reportstruct );
+    if (reportstruct != NULL) {
+        DEBUGP("%s[%d]: DELETE_PTR: %p\n", __FILE__, (int)__LINE__, reportstruct);
+        DELETE_PTR( reportstruct );
+        reportstruct = NULL;
+    }
+
     EndReport( mSettings->reporthdr );
 }
 
@@ -525,6 +545,7 @@ void Client::Run( void ) {
     // InitReport handles Barrier for multiple Streams
     mSettings->reporthdr = InitReport( mSettings );
     reportstruct = new ReportStruct;
+    DEBUGP("%s[%d]: new ReportStruct: %p\n", __FILE__, (int)__LINE__, reportstruct);
     reportstruct->packetID = 0;
     reportstruct->emptyreport=0;
     reportstruct->errwrite=0;
@@ -658,12 +679,22 @@ void Client::Run( void ) {
         mBuf_UDP->tv_usec = htonl( reportstruct->packetTime.tv_usec ); 
 
         if ( isMulticast( mSettings ) ) {
-            write( mSettings->mSock, mBuf, mSettings->mBufLen ); 
+            ssize_t ret = write( mSettings->mSock, mBuf, mSettings->mBufLen ); 
+            if (ret < 0) {
+                DEBUGP("%s[%d]: write error!! ret=%zd(%d)", __FILE__, (int)__LINE__, ret, errno);
+            }
+
         } else {
             write_UDP_FIN( ); 
         }
     }
-    DELETE_PTR( reportstruct );
+
+    if (reportstruct != NULL) {
+        DEBUGP("%s[%d]: DELETE_PTR: %p\n", __FILE__, (int)__LINE__, reportstruct);
+        DELETE_PTR( reportstruct );
+        reportstruct = NULL;
+    }
+
     EndReport( mSettings->reporthdr );
 } 
 // end Run
@@ -671,7 +702,7 @@ void Client::Run( void ) {
 void Client::InitiateServer() {
     if ( !isCompat( mSettings ) ) {
         int currLen;
-        client_hdr* temp_hdr;
+        client_hdr* temp_hdr = NULL;
         if ( isUDP( mSettings ) ) {
             UDP_datagram *UDPhdr = (UDP_datagram *)mBuf;
             temp_hdr = (client_hdr*)(UDPhdr + 1);
@@ -744,7 +775,8 @@ void Client::write_UDP_FIN( ) {
     int rc; 
     fd_set readSet; 
     struct timeval timeout; 
-    struct UDP_datagram* mBuf_UDP = (struct UDP_datagram*) mBuf; 
+    struct UDP_datagram* mBuf_UDP = (struct UDP_datagram*) mBuf;
+    ssize_t ret = 0;
 
     int count = 0; 
     int packetid;
@@ -752,7 +784,10 @@ void Client::write_UDP_FIN( ) {
         count++; 
 
         // write data 
-        write( mSettings->mSock, mBuf, mSettings->mBufLen ); 
+        ret = write( mSettings->mSock, mBuf, mSettings->mBufLen );
+        if (ret < 0) {
+            printf("%s[%d]: write error!! ret=%zd(%d)\n", __FILE__, (int)__LINE__, ret, errno);
+        }
 	// decrement the packet count
 	packetid = ntohl(mBuf_UDP->id);
         mBuf_UDP->id = htonl(--packetid); 
@@ -770,13 +805,18 @@ void Client::write_UDP_FIN( ) {
             // select timed out 
             continue; 
         } else {
+            int len = sizeof(UDP_datagram) + sizeof(server_hdr);
+            char buf[300];
+            memset(buf, 0x00, sizeof(buf));
+            UDP_datagram* udp = (UDP_datagram*)buf;
             // socket ready to read 
-            rc = read( mSettings->mSock, mBuf, mSettings->mBufLen ); 
+            rc = read( mSettings->mSock, buf, len ); 
             WARN_errno( rc < 0, "read" );
     	    if ( rc < 0 ) {
+                printf("%s[%d]: read error!! rc=%d(%d)\n", __FILE__, (int)__LINE__, rc, errno);
                 break;
-            } else if ( rc >= (int) (sizeof(UDP_datagram) + sizeof(server_hdr)) ) {
-                ReportServerUDP( mSettings, (server_hdr*) ((UDP_datagram*)mBuf + 1) );
+            } else {
+                ReportServerUDP( mSettings, (server_hdr*) ((UDP_datagram*)udp + 1) );
             }
 
             return; 
diff -uprN iperf-2.0.9.orig/src/Launch.cpp iperf-2.0.9/src/Launch.cpp
--- iperf-2.0.9.orig/src/Launch.cpp	2016-06-07 03:48:21.000000000 +0900
+++ iperf-2.0.9/src/Launch.cpp	2017-02-08 20:23:58.711750693 +0900
@@ -61,6 +61,12 @@
 #include "Server.hpp"
 #include "PerfSocket.hpp"
 
+#ifdef _DEBUG
+#define DEBUGP(fmt, ...)    printf(fmt, ## __VA_ARGS__)
+#else
+#define DEBUGP(fmt, ...)
+#endif
+
 /*
  * listener_spawn is responsible for creating a Listener class
  * and launching the listener. It is provided as a means for
@@ -71,10 +77,15 @@ void listener_spawn( thread_Settings *th
 
     // start up a listener
     theListener = new Listener( thread );
+    DEBUGP("%s[%d]: new Listener: %p\n", __FILE__, (int)__LINE__, theListener);
 
     // Start listening
     theListener->Run();
-    DELETE_PTR( theListener );
+    if (theListener != NULL) {
+        DEBUGP("%s[%d]: DELETE_PTR: %p\n", __FILE__, (int)__LINE__, theListener);
+        DELETE_PTR( theListener );
+        theListener = NULL;
+    }
 }
 
 /*
@@ -87,10 +98,15 @@ void server_spawn( thread_Settings *thre
 
     // Start up the server
     theServer = new Server( thread );
-    
+    DEBUGP("%s[%d]: new Server: %p\n", __FILE__, (int)__LINE__, theServer);
+
     // Run the test
     theServer->Run();
-    DELETE_PTR( theServer);
+    if (theServer != NULL) {
+        DEBUGP("%s[%d]: DELETE_PTR: %p\n", __FILE__, (int)__LINE__, theServer);
+        DELETE_PTR( theServer );
+        theServer = NULL;
+    }
 }
 
 /*
@@ -103,6 +119,7 @@ void client_spawn( thread_Settings *thre
 
     //start up the client
     theClient = new Client( thread );
+    DEBUGP("%s[%d]: new Client: %p\n", __FILE__, (int)__LINE__, theClient);
 
     // Let the server know about our settings
     theClient->InitiateServer();
@@ -110,6 +127,11 @@ void client_spawn( thread_Settings *thre
     // Run the test
     theClient->Run();
     DELETE_PTR( theClient );
+    if (theClient != NULL) {
+        DEBUGP("%s[%d]: DELETE_PTR: %p\n", __FILE__, (int)__LINE__, theClient);
+        DELETE_PTR( theClient );
+        theClient = NULL;
+    }
 }
 
 /*
@@ -135,6 +157,7 @@ void client_init( thread_Settings *clien
     Mutex_Lock( &groupCond );
     groupID--;
     clients->multihdr = InitMulti( clients, groupID );
+    DEBUGP("%s[%d]: InitMulti: %p\n", __FILE__, (int)__LINE__, clients->multihdr);
     Mutex_Unlock( &groupCond );
 
 #ifdef HAVE_THREAD
@@ -150,6 +173,8 @@ void client_init( thread_Settings *clien
     // to the list of threads to start
     for (int i = 1; i < clients->mThreads; i++) {
         Settings_Copy( clients, &next );
+        DEBUGP("%s[%d]: Settings_Copy: %p\n", __FILE__, (int)__LINE__, next);
+
         unsetReport( next );
         itr->runNow = next;
         itr = next;
diff -uprN iperf-2.0.9.orig/src/List.cpp iperf-2.0.9/src/List.cpp
--- iperf-2.0.9.orig/src/List.cpp	2016-06-07 03:48:21.000000000 +0900
+++ iperf-2.0.9/src/List.cpp	2017-02-09 09:30:52.838486999 +0900
@@ -54,6 +54,12 @@
 #include "Mutex.h"
 #include "SocketAddr.h"
 
+#ifdef _DEBUG
+#define DEBUGP(fmt, ...)    printf(fmt, ## __VA_ARGS__)
+#else
+#define DEBUGP(fmt, ...)
+#endif
+
 /*
  * Global List and Mutex variables
  */
@@ -86,7 +92,11 @@ void Iperf_delete ( iperf_sockaddr *del,
                 itr = itr->next;
             }
         }
-        delete temp;
+        if (temp != NULL) {
+   	        DEBUGP("%s[%d]: delete: %p\n", __FILE__, (int)__LINE__, temp);
+            delete temp;
+            temp = NULL;
+        }
     }
 }
 
@@ -97,7 +107,11 @@ void Iperf_destroy ( Iperf_ListEntry **r
     Iperf_ListEntry *itr1 = *root, *itr2;
     while ( itr1 != NULL ) {
         itr2 = itr1->next;
-        delete itr1;
+        if (itr1 != NULL) {
+            DEBUGP("%s[%d]: delete: %p\n", __FILE__, (int)__LINE__, itr1);
+            delete itr1;
+            itr1 = NULL;
+        }
         itr1 = itr2;
     }
     *root = NULL;
diff -uprN iperf-2.0.9.orig/src/Listener.cpp iperf-2.0.9/src/Listener.cpp
--- iperf-2.0.9.orig/src/Listener.cpp	2016-06-07 03:48:21.000000000 +0900
+++ iperf-2.0.9/src/Listener.cpp	2017-02-09 16:57:24.308883999 +0900
@@ -80,6 +80,12 @@
 #include "List.h"
 #include "util.h" 
 
+#ifdef _DEBUG
+#define DEBUGP(fmt, ...)    printf(fmt, ## __VA_ARGS__)
+#else
+#define DEBUGP(fmt, ...)
+#endif
+
 /* ------------------------------------------------------------------- 
  * Stores local hostname and socket info. 
  * ------------------------------------------------------------------- */ 
@@ -92,6 +98,7 @@ Listener::Listener( thread_Settings *inS
 
     // initialize buffer
     mBuf = new char[ mSettings->mBufLen ];
+    DEBUGP("%s[%d]: new char: %p\n", __FILE__, (int)__LINE__, mBuf);
 
     // open listening socket 
     Listen( ); 
@@ -103,13 +110,20 @@ Listener::Listener( thread_Settings *inS
  * Delete memory (buffer). 
  * ------------------------------------------------------------------- */ 
 Listener::~Listener() {
+    DEBUGP("%s[%d]: Listener::~Listener\n", __FILE__, (int)__LINE__);
     if ( mSettings->mSock != INVALID_SOCKET ) {
         int rc = close( mSettings->mSock );
         WARN_errno( rc == SOCKET_ERROR, "close" );
         mSettings->mSock = INVALID_SOCKET;
     }
-    DELETE_ARRAY( mBuf );
-} // end ~Listener 
+
+    if (mBuf != NULL) {
+        DEBUGP("%s[%d]: DELTE_ARRAY: %p\n", __FILE__, (int)__LINE__, mBuf);
+        DELETE_ARRAY( mBuf );
+        mBuf = NULL;
+   	}
+}
+
 
 /* ------------------------------------------------------------------- 
  * Listens for connections and starts Servers to handle data. 
@@ -139,7 +153,8 @@ void Listener::Run( void ) {
     {
         bool client = false, UDP = isUDP( mSettings ), mCount = (mSettings->mThreads != 0);
         thread_Settings *tempSettings = NULL;
-        Iperf_ListEntry *exist, *listtemp;
+        Iperf_ListEntry *exist = NULL;
+        Iperf_ListEntry *listtemp = NULL;
         client_hdr* hdr = ( UDP ? (client_hdr*) (((UDP_datagram*)mBuf) + 1) : 
                                   (client_hdr*) mBuf);
         
@@ -147,7 +162,10 @@ void Listener::Run( void ) {
             client = true;
             SockAddr_remoteAddr( mSettings );
         }
+
         Settings_Copy( mSettings, &server );
+        DEBUGP("%s[%d]: Settings_Copy: %p\n", __FILE__, (int)__LINE__, server);
+
         server->mThreadMode = kMode_Server;
     
     
@@ -206,6 +224,8 @@ sInterupted == SIGALRM
     
             // Create an entry for the connection list
             listtemp = new Iperf_ListEntry;
+            DEBUGP("%s[%d]: new Iperf_ListEntry: %p\n", __FILE__, (int)__LINE__, listtemp);
+
             memcpy(listtemp, &server->peer, sizeof(iperf_sockaddr));
             listtemp->next = NULL;
     
@@ -222,6 +242,7 @@ sInterupted == SIGALRM
                 Mutex_Lock( &groupCond );
                 groupID--;
                 listtemp->holder = InitMulti( server, groupID );
+                DEBUGP("%s[%d]: InitMulti: %p\n", __FILE__, (int)__LINE__, listtemp->holder);
                 server->multihdr = listtemp->holder;
                 Mutex_Unlock( &groupCond );
             }
@@ -283,11 +304,40 @@ sInterupted == SIGALRM
             if ( !isSingleClient( mSettings ) ) {
                 mClients--;
             }
+
+            /*
+            if (server != NULL) {
+               DEBUGP("%s[%d]: Settings_Destroy: %p\n", __FILE__, (int)__LINE__, server);
+               Settings_Destroy( server );
+               server = NULL;
+            }
+            */
+
             Settings_Copy( mSettings, &server );
+            DEBUGP("%s[%d]: Settings_Copy: %p\n", __FILE__, (int)__LINE__, server);
+
             server->mThreadMode = kMode_Server;
+
+            if ((listtemp != NULL) && (listtemp->holder != NULL)) {
+                DEBUGP("%s[%d]: free: %p\n", __FILE__, (int)__LINE__, listtemp->holder);
+                // listtemp is deleted by Server::Run
+                free(listtemp->holder);
+                listtemp->holder = NULL;
+            }
+
+            if (tempSettings != NULL) {
+                DEBUGP("%s[%d]: free: %p\n", __FILE__, (int)__LINE__, tempSettings);
+                free(tempSettings);
+                tempSettings = NULL;
+        	}
+
         } while ( !sInterupted && (!mCount || ( mCount && mClients > 0 )) );
-    
-        Settings_Destroy( server );
+
+        if (server != NULL) {
+            DEBUGP("%s[%d]: Settings_Destroy: %p\n", __FILE__, (int)__LINE__, server);
+            Settings_Destroy( server );
+            server = NULL;
+        }
     }
 } // end Run 
 
@@ -512,12 +562,14 @@ void Listener::UDPSingleServer( ) {
     
     bool client = false, UDP = isUDP( mSettings ), mCount = (mSettings->mThreads != 0);
     thread_Settings *tempSettings = NULL;
-    Iperf_ListEntry *exist, *listtemp;
+    Iperf_ListEntry *exist = NULL;
+    Iperf_ListEntry *listtemp = NULL;
     int rc;
     int32_t datagramID;
     client_hdr* hdr = ( UDP ? (client_hdr*) (((UDP_datagram*)mBuf) + 1) : 
                               (client_hdr*) mBuf);
     ReportStruct *reportstruct = new ReportStruct;
+    DEBUGP("%s[%d]: new ReportStruct: %p\n", __FILE__, (int)__LINE__, reportstruct);
     bool mMode_Time = isServerModeTime( mSettings ) && !isDaemon( mSettings );
     // setup termination variables
     if ( mMode_Time ) {
@@ -530,6 +582,7 @@ void Listener::UDPSingleServer( ) {
         SockAddr_remoteAddr( mSettings );
     }
     Settings_Copy( mSettings, &server );
+    DEBUGP("%s[%d]: Settings_Copy: %p\n", __FILE__, (int)__LINE__, server);
     server->mThreadMode = kMode_Server;
 
 
@@ -634,7 +687,11 @@ void Listener::UDPSingleServer( ) {
                     }
                     EndReport( exist->server->reporthdr );
                     exist->server->reporthdr = NULL;
-                    Iperf_delete( &(exist->server->peer), &clients );
+                    if (clients == NULL) {
+                        DEBUGP("%s[%d]: Iperf_delete: %p\n", __FILE__, (int)__LINE__, clients);
+                        Iperf_delete( &(exist->server->peer), &clients );
+                        clients = NULL;
+                    }
                 } else if ( rc > (int) ( sizeof( UDP_datagram )
                                                   + sizeof( server_hdr ) ) ) {
                     UDP_datagram *UDP_Hdr;
@@ -685,6 +742,7 @@ void Listener::UDPSingleServer( ) {
 
         // Create an entry for the connection list
         listtemp = new Iperf_ListEntry;
+        DEBUGP("%s[%d]: new Iperf_ListEntry: %p\n", __FILE__, (int)__LINE__, listtemp);
         memcpy(listtemp, &server->peer, sizeof(iperf_sockaddr));
         listtemp->server = server;
         listtemp->next = NULL;
@@ -701,6 +759,7 @@ void Listener::UDPSingleServer( ) {
             Mutex_Lock( &groupCond );
             groupID--;
             listtemp->holder = InitMulti( server, groupID );
+            DEBUGP("%s[%d]: InitMulti: %p\n", __FILE__, (int)__LINE__, listtemp->holder);
             server->multihdr = listtemp->holder;
             Mutex_Unlock( &groupCond );
         }
@@ -733,12 +792,41 @@ void Listener::UDPSingleServer( ) {
         if ( !isSingleClient( mSettings ) ) {
             mClients--;
         }
+
+        /*
+        if (server != NULL) {
+            DEBUGP("%s[%d]: Settings_Destroy: %p\n", __FILE__, (int)__LINE__, server);
+            Settings_Destroy( server );
+            server = NULL;
+        }
+        */
+
         Settings_Copy( mSettings, &server );
+        DEBUGP("%s[%d]: Settings_Copy: %p\n", __FILE__, (int)__LINE__, server);
+
         server->mThreadMode = kMode_Server;
+
+        if ((listtemp != NULL) && (listtemp->holder != NULL)) {
+            DEBUGP("%s[%d]: free: %p\n", __FILE__, (int)__LINE__, listtemp->holder);
+            free(listtemp->holder);
+            listtemp->holder = NULL;
+        }
+
     } while ( !sInterupted && (!mCount || ( mCount && mClients > 0 )) );
     Mutex_Unlock( &clients_mutex );
 
-    Settings_Destroy( server );
+    if (reportstruct != NULL) {
+        DEBUGP("%s[%d]: DELETE_PTR: %p\n", __FILE__, (int)__LINE__, reportstruct);
+        DELETE_PTR(reportstruct);
+        reportstruct = NULL;
+    }
+
+    if (server != NULL) {
+        DEBUGP("%s[%d]: Settings_Destroy: %p\n", __FILE__, (int)__LINE__, server);
+        Settings_Destroy( server );
+        server = NULL;
+    }
+
 }
 
 
diff -uprN iperf-2.0.9.orig/src/Locale.c iperf-2.0.9/src/Locale.c
--- iperf-2.0.9.orig/src/Locale.c	2016-06-07 03:48:21.000000000 +0900
+++ iperf-2.0.9/src/Locale.c	2017-02-08 20:23:58.723750693 +0900
@@ -154,34 +154,34 @@ const char separator_line[] =
 "------------------------------------------------------------\n";
 
 const char server_port[] =
-"Server listening on %s port %d\n";
+"Server listening on %s port %u\n";
 
 const char client_port[] =
-"Client connecting to %s, %s port %d\n";
+"Client connecting to %s, %s port %u\n";
 
 const char server_pid_port[] =
-"Server listening on %s port %d with pid %d\n";
+"Server listening on %s port %u with pid %u\n";
 
 const char client_pid_port[] =
-"Client connecting to %s, %s port %d with pid %d\n";
+"Client connecting to %s, %s port %u with pid %u\n";
 
 const char bind_address[] =
 "Binding to local address %s\n";
 
 const char multicast_ttl[] =
-"Setting multicast TTL to %d\n";
+"Setting multicast TTL to %u\n";
 
 const char join_multicast[] =
 "Joining multicast group  %s\n";
 
 const char client_datagram_size[] =
-"Sending %d byte datagrams, IPG target: %4.2f us\n";
+"Sending %u byte datagrams, IPG target: %4.2f us\n";
 
 const char client_datagram_size_kalman[] =
-"Sending %d byte datagrams, IPG target: %4.2f us (kalman adjust)\n";
+"Sending %u byte datagrams, IPG target: %4.2f us (kalman adjust)\n";
 
 const char server_datagram_size[] =
-"Receiving %d byte datagrams\n";
+"Receiving %u byte datagrams\n";
 
 const char tcp_window_size[] =
 "TCP window size";
@@ -230,30 +230,30 @@ const char report_bw_read_enhanced_heade
 "[ ID] Interval        Transfer    Bandwidth       Reads   Dist(bin=%.1fK)\n";
 
 const char report_bw_read_enhanced_format[] =
-"[%3d] %4.2f-%4.2f sec  %ss  %ss/sec  %d    %d:%d:%d:%d:%d:%d:%d:%d\n";
+"[%3d] %4.2f-%4.2f sec  %ss  %ss/sec  %u    %u:%u:%u:%u:%u:%u:%u:%u\n";
 
 const char report_sum_bw_read_enhanced_format[] =
-"[SUM] %4.2f-%4.2f sec  %ss  %ss/sec  %d    %d:%d:%d:%d:%d:%d:%d:%d\n";
+"[SUM] %4.2f-%4.2f sec  %ss  %ss/sec  %u    %u:%u:%u:%u:%u:%u:%u:%u\n";
 
 #ifdef HAVE_STRUCT_TCP_INFO_TCPI_TOTAL_RETRANS
 const char report_bw_write_enhanced_header[] =
 "[ ID] Interval        Transfer    Bandwidth       Write/Err  Rtry    Cwnd/RTT\n";
 
 const char report_bw_write_enhanced_format[] =
-"[%3d] %4.2f-%4.2f sec  %ss  %ss/sec  %d/%d %10d %8dK/%u us\n";
+"[%3d] %4.2f-%4.2f sec  %ss  %ss/sec  %u/%u %10d %8dK/%u us\n";
 
 const char report_sum_bw_write_enhanced_format[] =
-"[SUM] %4.2f-%4.2f sec  %ss  %ss/sec  %d/%d%10d\n";
+"[SUM] %4.2f-%4.2f sec  %ss  %ss/sec  %u/%u%10d\n";
 
 #else
 const char report_bw_write_enhanced_header[] =
 "[ ID] Interval        Transfer    Bandwidth       Write/Err\n";
 
 const char report_bw_write_enhanced_format[] =
-"[%3d] %4.2f-%4.2f sec  %ss  %ss/sec  %d/%d\n";
+"[%3d] %4.2f-%4.2f sec  %ss  %ss/sec  %u/%u\n";
 
 const char report_sum_bw_write_enhanced_format[] =
-"[SUM] %4.2f-%4.2f sec  %ss  %ss/sec  %d/%d\n";
+"[SUM] %4.2f-%4.2f sec  %ss  %ss/sec  %u/%u\n";
 #endif
 
 const char report_bw_pps_enhanced_header[] =
@@ -282,10 +282,10 @@ const char report_bw_jitter_loss_suppres
  * Misc reports
  * ------------------------------------------------------------------- */
 const char report_outoforder[] =
-"[%3d] %4.2f-%4.2f sec  %d datagrams received out-of-order\n";
+"[%3d] %4.2f-%4.2f sec  %u datagrams received out-of-order\n";
 
 const char report_sum_outoforder[] =
-"[SUM] %4.2f-%4.2f sec  %d datagrams received out-of-order\n";
+"[SUM] %4.2f-%4.2f sec  %u datagrams received out-of-order\n";
 
 const char report_peer[] =
 "[%3d] local %s port %u connected with %s port %u\n";
@@ -294,13 +294,13 @@ const char report_mss_unsupported[] =
 "[%3d] MSS and MTU size unknown (TCP_MAXSEG not supported by OS?)\n";
 
 const char report_mss[] =
-"[%3d] MSS size %d bytes (MTU %d bytes, %s)\n";
+"[%3d] MSS size %u bytes (MTU %u bytes, %s)\n";
 
 const char report_datagrams[] =
-"[%3d] Sent %d datagrams\n";
+"[%3d] Sent %u datagrams\n";
 
 const char report_sum_datagrams[] =
-"[SUM] Sent %d datagrams\n";
+"[SUM] Sent %u datagrams\n";
 
 const char server_reporting[] =
 "[%3d] Server Report:\n";
@@ -311,30 +311,30 @@ const char reportCSV_peer[] =
 #ifdef HAVE_QUAD_SUPPORT
 #ifdef HAVE_PRINTF_QD
 const char reportCSV_bw_format[] =
-"%s,%s,%d,%.1f-%.1f,%qd,%qd\n";
+"%s,%s,%u,%.1f-%.1f,%qd,%qd\n";
 
 const char reportCSV_bw_jitter_loss_format[] =
-"%s,%s,%d,%.1f-%.1f,%qd,%qd,%.3f,%d,%d,%.3f,%d\n";
+"%s,%s,%u,%.1f-%.1f,%qd,%qd,%.3f,%u,%u,%.3f,%u\n";
 #else // HAVE_PRINTF_QD
 const char reportCSV_bw_format[] =
-"%s,%s,%d,%.1f-%.1f,%lld,%lld\n";
+"%s,%s,%u,%.1f-%.1f,%lld,%lld\n";
 
 const char reportCSV_bw_jitter_loss_format[] =
-"%s,%s,%d,%.1f-%.1f,%lld,%lld,%.3f,%d,%d,%.3f,%d\n";
+"%s,%s,%u,%.1f-%.1f,%lld,%lld,%.3f,%u,%u,%.3f,%u\n";
 #endif // HAVE_PRINTF_QD
 #else // HAVE_QUAD_SUPPORT
 #ifdef WIN32
 const char reportCSV_bw_format[] =
-"%s,%s,%d,%.1f-%.1f,%I64d,%I64d\n";
+"%s,%s,%u,%.1f-%.1f,%I64u,%I64u\n";
 
 const char reportCSV_bw_jitter_loss_format[] =
-"%s,%s,%d,%.1f-%.1f,%I64d,%I64d,%.3f,%d,%d,%.3f,%d\n";
+"%s,%s,%u,%.1f-%.1f,%I64u,%I64u,%.3f,%u,%u,%.3f,%u\n";
 #else
 const char reportCSV_bw_format[] =
-"%s,%s,%d,%.1f-%.1f,%d,%d\n";
+"%s,%s,%u,%.1f-%.1f,%u,%u\n";
 
 const char reportCSV_bw_jitter_loss_format[] =
-"%s,%s,%d,%.1f-%.1f,%d,%d,%.3f,%d,%d,%.3f,%d\n";
+"%s,%s,%u,%.1f-%.1f,%u,%u,%.3f,%u,%u,%.3f,%u\n";
 #endif //WIN32
 #endif //HAVE_QUAD_SUPPORT
 /* -------------------------------------------------------------------
@@ -345,7 +345,7 @@ const char warn_window_requested[] =
 " (WARNING: requested %s)";
 
 const char warn_window_small[] = "\
-WARNING: TCP window size set to %d bytes. A small window size\n\
+WARNING: TCP window size set to %u bytes. A small window size\n\
 will give poor performance. See the Iperf documentation.\n";
 
 const char warn_delay_large[] =
@@ -355,10 +355,10 @@ const char warn_no_pathmtu[] =
 "WARNING: Path MTU Discovery may not be enabled.\n";
 
 const char warn_no_ack[]=
-"[%3d] WARNING: did not receive ack of last datagram after %d tries.\n";
+"[%3d] WARNING: did not receive ack of last datagram after %u tries.\n";
 
 const char warn_ack_failed[]=
-"[%3d] WARNING: ack of last datagram failed after %d tries.\n";
+"[%3d] WARNING: ack of last datagram failed after %u tries.\n";
 
 const char warn_fileopen_failed[]=
 "WARNING: Unable to open file stream for transfer\n\
@@ -389,7 +389,7 @@ const char warn_implied_compatibility[]
 "WARNING: option -%c has implied compatibility mode\n";
 
 const char warn_buffer_too_small[] =
-"WARNING: the UDP buffer was increased to %d for proper operation\n";
+"WARNING: the UDP buffer was increased to %u for proper operation\n";
 
 const char warn_invalid_single_threaded[] =
 "WARNING: option -%c is not valid in single threaded versions\n";
diff -uprN iperf-2.0.9.orig/src/ReportCSV.c iperf-2.0.9/src/ReportCSV.c
--- iperf-2.0.9.orig/src/ReportCSV.c	2016-06-07 03:48:21.000000000 +0900
+++ iperf-2.0.9/src/ReportCSV.c	2017-02-08 20:23:58.711750693 +0900
@@ -56,6 +56,11 @@
 #include "report_CSV.h"
 #include "Locale.h"
 
+#ifdef _DEBUG
+#define DEBUGP(fmt, ...)    printf(fmt, ## __VA_ARGS__)
+#else
+#define DEBUGP(fmt, ...)
+#endif
  
 void CSV_stats( Transfer_Info *stats ) {
     // $TIMESTAMP,$ID,$INTERVAL,$BYTE,$SPEED,$JITTER,$LOSS,$PACKET,$%LOSS
@@ -106,7 +111,9 @@ void CSV_stats( Transfer_Info *stats ) {
                 (100.0 * stats->cntError) / stats->cntDatagrams, stats->cntOutofOrder );
     }
     if ( stats->free == 1 && stats->reserved_delay != NULL ) {
+        DEBUGP("%s[%d]: malloc: %p\n", __FILE__, (int)__LINE__, stats->reserved_delay);
         free( stats->reserved_delay );
+        stats->reserved_delay = NULL;
     }
 }
 
@@ -116,6 +123,7 @@ void *CSV_peer( Connection_Info *stats,
     char local_addr[ REPORT_ADDRLEN ];
     char remote_addr[ REPORT_ADDRLEN ];
     char *buf = malloc( REPORT_ADDRLEN*2 + 10 );
+    DEBUGP("%s[%d]: malloc: %p\n", __FILE__, (int)__LINE__, buf);
     struct sockaddr *local = ((struct sockaddr*)&stats->local);
     struct sockaddr *peer = ((struct sockaddr*)&stats->peer);
 
diff -uprN iperf-2.0.9.orig/src/Reporter.c iperf-2.0.9/src/Reporter.c
--- iperf-2.0.9.orig/src/Reporter.c	2016-06-07 03:48:21.000000000 +0900
+++ iperf-2.0.9/src/Reporter.c	2017-02-09 09:35:07.786486999 +0900
@@ -63,6 +63,12 @@
 extern "C" {
 #endif
 
+#ifdef _DEBUG
+#define DEBUGP(fmt, ...)    printf(fmt, ## __VA_ARGS__)
+#else
+#define DEBUGP(fmt, ...)
+#endif
+
 /*
   The following 4 functions are provided for Reporting
   styles that do not have all the reporting formats. For
@@ -129,8 +135,10 @@ MultiHeader* InitMulti( thread_Settings
         if ( isMultipleReport( agent ) ) {
             multihdr = malloc(sizeof(MultiHeader) +  sizeof(ReporterData) +
                               NUM_MULTI_SLOTS * sizeof(Transfer_Info));
+            DEBUGP("%s[%d]: malloc: %p\n", __FILE__, (int)__LINE__, multihdr);
         } else {
             multihdr = malloc(sizeof(MultiHeader));
+            DEBUGP("%s[%d]: malloc: %p\n", __FILE__, (int)__LINE__, multihdr);
         }
         if ( multihdr != NULL ) {
             memset( multihdr, 0, sizeof(MultiHeader) );
@@ -230,6 +238,7 @@ ReportHeader* InitReport( thread_Setting
          */
         reporthdr = malloc( sizeof(ReportHeader) +
                             NUM_REPORT_STRUCTS * sizeof(ReportStruct) );
+        DEBUGP("%s[%d]: malloc: %p\n", __FILE__, (int)__LINE__, reporthdr);
         if ( reporthdr != NULL ) {
             // Only need to make sure the headers are clean
             memset( reporthdr, 0, sizeof(ReportHeader));
@@ -278,6 +287,7 @@ ReportHeader* InitReport( thread_Setting
              * Create in one big chunk
              */
             reporthdr = malloc( sizeof(ReportHeader) );
+            DEBUGP("%s[%d]: malloc: %p\n", __FILE__, (int)__LINE__, reporthdr);
             if ( reporthdr != NULL ) {
                 // Only need to make sure the headers are clean
                 memset( reporthdr, 0, sizeof(ReportHeader));
@@ -459,6 +469,7 @@ void ReportSettings( thread_Settings *ag
          * Create in one big chunk
          */
         ReportHeader *reporthdr = malloc( sizeof(ReportHeader) );
+        DEBUGP("%s[%d]: malloc: %p\n", __FILE__, (int)__LINE__, reporthdr);
     
         if ( reporthdr != NULL ) {
             ReporterData *data = &reporthdr->report;
@@ -519,6 +530,7 @@ void ReportServerUDP( thread_Settings *a
          * Create in one big chunk
          */
         ReportHeader *reporthdr = malloc( sizeof(ReportHeader) );
+        DEBUGP("%s[%d]: malloc: %p\n", __FILE__, (int)__LINE__, reporthdr);
         Transfer_Info *stats = &reporthdr->report.info;
 
         if ( reporthdr != NULL ) {
@@ -624,6 +636,7 @@ again:
                 }
                 // finished with report so free it
                 free( temp );
+                DEBUGP("%s[%d]: free: %p\n", __FILE__, (int)__LINE__, temp);
                 Condition_Unlock ( ReportCond );
                 Condition_Signal( &ReportDoneCond );
                 if (ReportRoot)
@@ -685,7 +698,9 @@ again:
 void process_report ( ReportHeader *report ) {
     if ( report != NULL ) {
         if ( reporter_process_report( report ) ) {
+            DEBUGP("%s[%d]: free: %p\n", __FILE__, (int)__LINE__, report);
             free( report );
+            report = NULL;
         }
     }
 }
@@ -702,7 +717,9 @@ int reporter_process_report ( ReportHead
             // If we are done with this report then free it
             ReportHeader *temp = reporthdr->next;
             reporthdr->next = reporthdr->next->next;
+            DEBUGP("%s[%d]: free: %p\n", __FILE__, (int)__LINE__, temp);
             free( temp );
+            temp = NULL;
         }
     }
 
diff -uprN iperf-2.0.9.orig/src/Server.cpp iperf-2.0.9/src/Server.cpp
--- iperf-2.0.9.orig/src/Server.cpp	2016-06-07 03:48:21.000000000 +0900
+++ iperf-2.0.9/src/Server.cpp	2017-02-09 14:13:57.082089135 +0900
@@ -68,6 +68,12 @@
 #include <sys/mman.h>
 #endif
 
+#ifdef _DEBUG
+#define DEBUGP(fmt, ...)    printf(fmt, ## __VA_ARGS__)
+#else
+#define DEBUGP(fmt, ...)
+#endif
+
 /* -------------------------------------------------------------------
  * Stores connected socket and socket info.
  * ------------------------------------------------------------------- */
@@ -78,6 +84,8 @@ Server::Server( thread_Settings *inSetti
 
     // initialize buffer
     mBuf = new char[ mSettings->mBufLen ];
+    DEBUGP("%s[%d]: new char: %p\n", __FILE__, (int)__LINE__, mBuf);
+
     FAIL_errno( mBuf == NULL, "No memory for buffer\n", mSettings );
 }
 
@@ -91,7 +99,11 @@ Server::~Server() {
         WARN_errno( rc == SOCKET_ERROR, "close" );
         mSettings->mSock = INVALID_SOCKET;
     }
-    DELETE_ARRAY( mBuf );
+    if (mBuf != NULL) {
+        DEBUGP("%s[%d]: DELETE_ARRAY: %p\n", __FILE__, (int)__LINE__, mBuf);
+        DELETE_ARRAY( mBuf );
+        mBuf = NULL;
+    }
 }
 
 void Server::Sig_Int( int inSigno ) {
@@ -129,6 +141,7 @@ void Server::Run( void ) {
 #endif
 
     reportstruct = new ReportStruct;
+    DEBUGP("%s[%d]: new ReportStruct: %p\n", __FILE__, (int)__LINE__, reportstruct);
     if ( reportstruct != NULL ) {
         reportstruct->packetID = 0;
         mSettings->reporthdr = InitReport( mSettings );
@@ -293,10 +306,19 @@ void Server::Run( void ) {
     }
 
     Mutex_Lock( &clients_mutex );     
-    Iperf_delete( &(mSettings->peer), &clients ); 
+    if (clients != NULL) {
+        DEBUGP("%s[%d]: Iperf_delete: %p\n", __FILE__, (int)__LINE__, clients);
+        //Iperf_delete( &(mSettings->peer), &clients );
+        Iperf_destroy(&clients);
+        clients = NULL;
+    }
     Mutex_Unlock( &clients_mutex );
 
-    DELETE_PTR( reportstruct );
+    if (reportstruct != NULL) {
+        DEBUGP("%s[%d]: DELETE_PTR: %p\n", __FILE__, (int)__LINE__, reportstruct);
+        DELETE_PTR( reportstruct );
+        reportstruct = NULL;
+    }
     EndReport( mSettings->reporthdr );
 } 
 // end Recv 
@@ -321,10 +343,14 @@ void Server::write_UDP_AckFIN( ) {
     while ( count < 10 ) {
         count++; 
 
+        int len = sizeof(UDP_datagram) + sizeof(server_hdr);
+        char buf[300];
+        memset(buf, 0x00, sizeof(buf));
+
         UDP_datagram *UDP_Hdr;
         server_hdr *hdr;
 
-        UDP_Hdr = (UDP_datagram*) mBuf;
+        UDP_Hdr = (UDP_datagram*)buf;
 
         if ( mSettings->mBufLen > (int) ( sizeof( UDP_datagram )
                                           + sizeof( server_hdr ) ) ) {
@@ -359,7 +385,10 @@ void Server::write_UDP_AckFIN( ) {
         }
 
         // write data 
-        write( mSettings->mSock, mBuf, mSettings->mBufLen ); 
+        ssize_t ret = write( mSettings->mSock, buf, len ); 
+        if (ret < 0) {
+            printf("%s[%d]: write error!! ret=%zd(%d)\n", __FILE__, (int)__LINE__, ret, errno);
+        }
 
         // wait until the socket is readable, or our timeout expires 
         FD_SET( mSettings->mSock, &readSet ); 
@@ -379,6 +408,7 @@ void Server::write_UDP_AckFIN( ) {
             if ( rc <= 0 ) {
                 // Connection closed or errored
                 // Stop using it.
+                printf("%s[%d]: read error!! rc=%d(%d)\n", __FILE__, (int)__LINE__, rc, errno);
                 return;
             }
         } 
diff -uprN iperf-2.0.9.orig/src/Settings.cpp iperf-2.0.9/src/Settings.cpp
--- iperf-2.0.9.orig/src/Settings.cpp	2016-06-07 03:48:21.000000000 +0900
+++ iperf-2.0.9/src/Settings.cpp	2017-02-09 16:17:04.728883999 +0900
@@ -71,6 +71,12 @@
 
 #include "gnu_getopt.h"
 
+#ifdef _DEBUG
+#define DEBUGP(fmt, ...)    printf(fmt, ## __VA_ARGS__)
+#else
+#define DEBUGP(fmt, ...)
+#endif
+
 void Settings_Interpret( char option, const char *optarg, thread_Settings *mExtSettings );
 
 /* -------------------------------------------------------------------
@@ -240,22 +246,29 @@ void Settings_Initialize( thread_Setting
 } // end Settings
 
 void Settings_Copy( thread_Settings *from, thread_Settings **into ) {
+
     *into = new thread_Settings;
+    DEBUGP("%s[%d]: new thread_Settings: %p\n", __FILE__, (int)__LINE__, *into);
     memcpy( *into, from, sizeof(thread_Settings) );
+
     if ( from->mHost != NULL ) {
         (*into)->mHost = new char[ strlen(from->mHost) + 1];
+        DEBUGP("%s[%d]: new char: %p\n", __FILE__, (int)__LINE__, (*into)->mHost);
         strcpy( (*into)->mHost, from->mHost );
     }
     if ( from->mOutputFileName != NULL ) {
         (*into)->mOutputFileName = new char[ strlen(from->mOutputFileName) + 1];
+        DEBUGP("%s[%d]: new char: %p\n", __FILE__, (int)__LINE__, (*into)->mOutputFileName);
         strcpy( (*into)->mOutputFileName, from->mOutputFileName );
     }
     if ( from->mLocalhost != NULL ) {
         (*into)->mLocalhost = new char[ strlen(from->mLocalhost) + 1];
+        DEBUGP("%s[%d]: new char: %p\n", __FILE__, (int)__LINE__, (*into)->mLocalhost);
         strcpy( (*into)->mLocalhost, from->mLocalhost );
     }
     if ( from->mFileName != NULL ) {
         (*into)->mFileName = new char[ strlen(from->mFileName) + 1];
+        DEBUGP("%s[%d]: new char: %p\n", __FILE__, (int)__LINE__, (*into)->mFileName);
         strcpy( (*into)->mFileName, from->mFileName );
     }
     // Zero out certain entries
@@ -269,11 +282,37 @@ void Settings_Copy( thread_Settings *fro
  * ------------------------------------------------------------------- */
 
 void Settings_Destroy( thread_Settings *mSettings) {
-    DELETE_ARRAY( mSettings->mHost      );
-    DELETE_ARRAY( mSettings->mLocalhost );
-    DELETE_ARRAY( mSettings->mFileName  );
-    DELETE_ARRAY( mSettings->mOutputFileName );
-    DELETE_PTR( mSettings );
+    if (mSettings->mHost != NULL) {
+        DEBUGP("%s[%d]: DELETE_ARRAY: %p\n", __FILE__, (int)__LINE__, &mSettings->mHost[0]);
+        DELETE_ARRAY( mSettings->mHost      );
+        mSettings->mHost = NULL;
+    }
+
+    if (mSettings->mLocalhost != NULL) {
+        DEBUGP("%s[%d]: DELETE_ARRAY: %p\n", __FILE__, (int)__LINE__, mSettings->mLocalhost);
+        DELETE_ARRAY( mSettings->mLocalhost );
+        mSettings->mLocalhost = NULL;
+   	}
+
+    if (mSettings->mFileName != NULL) {
+        DEBUGP("%s[%d]: DELETE_ARRAY: %p\n", __FILE__, (int)__LINE__, mSettings->mFileName);
+        DELETE_ARRAY( mSettings->mFileName  );
+        mSettings->mFileName = NULL;
+   	}
+
+
+    if (mSettings->mOutputFileName != NULL) {
+        DEBUGP("%s[%d]: DELETE_ARRAY: %p\n", __FILE__, (int)__LINE__, mSettings->mOutputFileName);
+        DELETE_ARRAY( mSettings->mOutputFileName );
+        mSettings->mOutputFileName = NULL;
+   	}
+
+    if (mSettings != NULL) {
+        DEBUGP("%s[%d]: DELETE_PTR: %p\n", __FILE__, (int)__LINE__, mSettings);
+        DELETE_PTR( mSettings );
+        mSettings = NULL;
+   	}
+
 } // end ~Settings
 
 /* -------------------------------------------------------------------
@@ -329,7 +368,7 @@ void Settings_Interpret( char option, co
             Settings_GetLowerCaseArg(optarg,outarg);
 	    // scan for PPS units, just look for 'p' as that's good enough
 #ifdef HAVE_QUAD_SUPPORT
-	    sscanf(outarg, "%llu%c", &theNum, &suffix );
+        sscanf(outarg, "%lu%c", &theNum, &suffix );
 #else
 	    sscanf(outarg, "%lu%c", &theNum, &suffix );
 #endif
@@ -350,6 +389,8 @@ void Settings_Interpret( char option, co
 
         case 'c': // client mode w/ server host to connect to
             mExtSettings->mHost = new char[ strlen( optarg ) + 1 ];
+            DEBUGP("%s[%d]: new char: %p\n", __FILE__, (int)__LINE__, mExtSettings->mHost);
+
             strcpy( mExtSettings->mHost, optarg );
 
             if ( mExtSettings->mThreadMode == kMode_Unknown ) {
@@ -443,6 +484,7 @@ void Settings_Interpret( char option, co
         case 'o' : // output the report and other messages into the file
             unsetSTDOUT( mExtSettings );
             mExtSettings->mOutputFileName = new char[strlen(optarg)+1];
+            DEBUGP("%s[%d]: new char: %p\n", __FILE__, (int)__LINE__, mExtSettings->mOutputFileName);
             strcpy( mExtSettings->mOutputFileName, optarg);
             break;
 
@@ -563,19 +605,26 @@ void Settings_Interpret( char option, co
             // more esoteric options
         case 'B': // specify bind address
 	    parsedopts = new char[ strlen( optarg ) + 1 ];
+   	    DEBUGP("%s[%d]: new char: %p\n", __FILE__, (int)__LINE__, parsedopts);
 	    strcpy(parsedopts, optarg );
 	    results = strtok(parsedopts, ":");
 	    if (results != NULL) {
 	      mExtSettings->mLocalhost = new char[ strlen( results ) + 1 ];
+     	  DEBUGP("%s[%d]: new char: %p\n", __FILE__, (int)__LINE__, mExtSettings->mLocalhost);
 	      strcpy( mExtSettings->mLocalhost, results );
 	      results = strtok(NULL, ":");
 	      if (results != NULL) 
 		mExtSettings->mBindPort = atoi(results);
 	    } else {  
 	      mExtSettings->mLocalhost = new char[ strlen( optarg ) + 1 ];
+          DEBUGP("%s[%d]: new char: %p\n", __FILE__, (int)__LINE__, mExtSettings->mLocalhost);
 	      strcpy( mExtSettings->mLocalhost, optarg );
 	    }
-	    delete parsedopts;
+        if (parsedopts != NULL) {
+           DEBUGP("%s[%d]: delete: %p\n", __FILE__, (int)__LINE__, parsedopts);
+           delete parsedopts;
+            parsedopts = NULL;
+        }
             // Test for Multicast
             iperf_sockaddr temp;
             SockAddr_setHostname( mExtSettings->mLocalhost, &temp,
@@ -607,6 +656,7 @@ void Settings_Interpret( char option, co
 
             setFileInput( mExtSettings );
             mExtSettings->mFileName = new char[strlen(optarg)+1];
+            DEBUGP("%s[%d]: new char: %p\n", __FILE__, (int)__LINE__, mExtSettings->mFileName);
             strcpy( mExtSettings->mFileName, optarg);
             break;
 
@@ -619,6 +669,7 @@ void Settings_Interpret( char option, co
             setFileInput( mExtSettings );
             setSTDIN( mExtSettings );
             mExtSettings->mFileName = new char[strlen("<stdin>")+1];
+       	    DEBUGP("%s[%d]: new char: %p\n", __FILE__, (int)__LINE__, mExtSettings->mFileName);
             strcpy( mExtSettings->mFileName,"<stdin>");
             break;
 
@@ -701,6 +752,7 @@ void Settings_Interpret( char option, co
 #ifdef TCP_CONGESTION
 	    setCongestionControl( mExtSettings );
 	    mExtSettings->mCongestion = new char[strlen(optarg)+1];
+        DEBUGP("%s[%d]: new char: %p\n", __FILE__, (int)__LINE__, mExtSettings->mCongestion);
 	    strcpy( mExtSettings->mCongestion, optarg);
 #else
             fprintf( stderr, "The -Z option is not available on this operating system\n");
@@ -744,6 +796,8 @@ void Settings_GenerateListenerSettings(
     if ( !isCompat( client ) && 
          (client->mMode == kTest_DualTest || client->mMode == kTest_TradeOff) ) {
         *listener = new thread_Settings;
+        DEBUGP("%s[%d]: new Client: %p\n", __FILE__, (int)__LINE__, *listener);
+
         memcpy(*listener, client, sizeof( thread_Settings ));
         setCompat( (*listener) );
         unsetDaemon( (*listener) );
@@ -758,14 +812,15 @@ void Settings_GenerateListenerSettings(
         (*listener)->mOutputFileName = NULL;
         (*listener)->mMode       = kTest_Normal;
         (*listener)->mThreadMode = kMode_Listener;
-        if ( client->mHost != NULL ) {
-            (*listener)->mHost = new char[strlen( client->mHost ) + 1];
-            strcpy( (*listener)->mHost, client->mHost );
-        }
-        if ( client->mLocalhost != NULL ) {
-            (*listener)->mLocalhost = new char[strlen( client->mLocalhost ) + 1];
-            strcpy( (*listener)->mLocalhost, client->mLocalhost );
-        }
+
+        (*listener)->mHost = new char[strlen( client->mHost ) + 1];
+        DEBUGP("%s[%d]: new char: %p\n", __FILE__, (int)__LINE__, (*listener)->mHost);
+        strcpy( (*listener)->mHost, client->mHost );
+
+        (*listener)->mLocalhost = new char[strlen( client->mLocalhost ) + 1];
+        DEBUGP("%s[%d]: new char: %p\n", __FILE__, (int)__LINE__, (*listener)->mLocalhost);
+        strcpy( (*listener)->mLocalhost, client->mLocalhost );
+
     } else {
         *listener = NULL;
     }
@@ -786,6 +841,8 @@ void Settings_GenerateClientSettings( th
     int flags = ntohl(hdr->flags);
     if ( (flags & HEADER_VERSION1) != 0 ) {
         *client = new thread_Settings;
+        DEBUGP("%s[%d]: new thread_Settings: %p\n", __FILE__, (int)__LINE__, *client);
+
         memcpy(*client, server, sizeof( thread_Settings ));
         setCompat( (*client) );
         (*client)->mTID = thread_zeroid();
@@ -822,9 +879,12 @@ void Settings_GenerateClientSettings( th
         (*client)->mThreadMode = kMode_Client;
         if ( server->mLocalhost != NULL ) {
             (*client)->mLocalhost = new char[strlen( server->mLocalhost ) + 1];
+       	    DEBUGP("%s[%d]: new char: %p\n", __FILE__, (int)__LINE__, (*client)->mLocalhost);
             strcpy( (*client)->mLocalhost, server->mLocalhost );
         }
         (*client)->mHost = new char[REPORT_ADDRLEN];
+   	    DEBUGP("%s[%d]: new char: %p\n", __FILE__, (int)__LINE__, (*client)->mHost);
+
         if ( ((sockaddr*)&server->peer)->sa_family == AF_INET ) {
             inet_ntop( AF_INET, &((sockaddr_in*)&server->peer)->sin_addr, 
                        (*client)->mHost, REPORT_ADDRLEN);
@@ -847,6 +907,8 @@ void Settings_GenerateClientSettings( th
  * This should be an inverse operation of GenerateSpeakerSettings
  */
 void Settings_GenerateClientHdr( thread_Settings *client, client_hdr *hdr ) {
+    DEBUGP("client=%p, hdr=%p\n", client, hdr);
+
     if ( client->mMode != kTest_Normal ) {
         hdr->flags  = htonl(HEADER_VERSION1);
     } else {
diff -uprN iperf-2.0.9.orig/src/main.cpp iperf-2.0.9/src/main.cpp
--- iperf-2.0.9.orig/src/main.cpp	2016-06-07 03:48:21.000000000 +0900
+++ iperf-2.0.9/src/main.cpp	2017-02-09 13:47:39.212152135 +0900
@@ -75,6 +75,12 @@
 #include "service.h"
 #endif 
 
+#ifdef _DEBUG
+#define DEBUGP(fmt, ...)    printf(fmt, ## __VA_ARGS__)
+#else
+#define DEBUGP(fmt, ...)
+#endif
+
 /* -------------------------------------------------------------------
  * prototypes
  * ------------------------------------------------------------------- */
@@ -158,6 +164,7 @@ int main( int argc, char **argv ) {
 
     // Allocate the "global" settings
     thread_Settings* ext_gSettings = new thread_Settings;
+    DEBUGP("%s[%d]: new thread_Settings: %p\n", __FILE__, (int)__LINE__, ext_gSettings);
 
     // Initialize settings to defaults
     Settings_Initialize( ext_gSettings );
@@ -207,6 +214,7 @@ int main( int argc, char **argv ) {
             thread_Settings *into = NULL;
             // Create the settings structure for the reporter thread
             Settings_Copy( ext_gSettings, &into );
+            DEBUGP("%s[%d]: Settings_Copy: %p\n", __FILE__, (int)__LINE__, into);
             into->mThreadMode = kMode_Reporter;
 
             // Have the reporter launch the client or listener
@@ -256,6 +264,7 @@ int main( int argc, char **argv ) {
  * ------------------------------------------------------------------- */
 
 void Sig_Interupt( int inSigno ) {
+    DEBUGP("%s[%d]\n", __FILE__, (int)__LINE__);
 #ifdef HAVE_THREAD
     // We try to not allow a single interrupt handled by multiple threads
     // to completely kill the app so we save off the first thread ID
@@ -288,15 +297,18 @@ void Sig_Interupt( int inSigno ) {
  * ------------------------------------------------------------------- */
 
 void cleanup( void ) {
+    DEBUGP("%s[%d]\n", __FILE__, (int)__LINE__);
 #ifdef WIN32
     // Shutdown Winsock
     WSACleanup();
 #endif
     // clean up the list of clients
     Iperf_destroy ( &clients );
+    DEBUGP("%s[%d]: Iperf_destroy: %p\n", __FILE__, (int)__LINE__, clients);
 
     // shutdown the thread subsystem
     thread_destroy( );
+    DEBUGP("%s[%d]: thread_destroy\n", __FILE__, (int)__LINE__);
 } // end cleanup
 
 #ifdef WIN32
@@ -308,7 +320,7 @@ void cleanup( void ) {
  * 
  *-------------------------------------------------------------------- */
 VOID ServiceStart (DWORD dwArgc, LPTSTR *lpszArgv) {
-    thread_Settings* ext_gSettings;
+    thread_Settings* ext_gSettings = NULL;
  
     // report the status to the service control manager.
     //
@@ -319,6 +331,7 @@ VOID ServiceStart (DWORD dwArgc, LPTSTR
         goto clean;
 
     ext_gSettings = new thread_Settings;
+    DEBUGP("%s[%d]: new thread_Settings: %p\n", __FILE__, (int)__LINE__, ext_gSettings);
 
     // Initialize settings to defaults
     Settings_Initialize( ext_gSettings );
@@ -362,6 +375,8 @@ VOID ServiceStart (DWORD dwArgc, LPTSTR
         thread_Settings *into = NULL;
 #ifdef HAVE_THREAD
         Settings_Copy( ext_gSettings, &into );
+        DEBUGP("%s[%d]: Settings_Copy: %p\n", __FILE__, (int)__LINE__, into);
+
         into->mThreadMode = kMode_Reporter;
         into->runNow = ext_gSettings;
 #else
@@ -369,7 +384,17 @@ VOID ServiceStart (DWORD dwArgc, LPTSTR
 #endif
         thread_start( into );
     }
-    
+
+    if ((ext_gSettinfs != NULL) && (ext_gSettinfs->multihdr != NULL)) {
+        DEBUGP("%s[%d]: free: %p\n", __FILE__, (int)__LINE__, ext_gSettinfs->multihdr);
+        free(ext_gSettinfs->multihdr);
+        ext_gSettinfs->multihdr = NULL;
+    }
+    if ((ext_gSettinfs != NULL) {
+        DEBUGP("%s[%d]: delete: %p\n", __FILE__, (int)__LINE__, ext_gSettinfs);
+        delete(ext_gSettinfs);
+        ext_gSettinfs = NULL;
+    }
     // report the status to the service control manager.
     //
     if ( !ReportStatusToSCMgr(
@@ -404,6 +429,7 @@ VOID ServiceStart (DWORD dwArgc, LPTSTR
 //    the service has stopped responding.
 //    
 VOID ServiceStop() {
+    DEBUGP("%s[%d]\n", __FILE__, (int)__LINE__);
 #ifdef HAVE_THREAD
     Sig_Interupt( 1 );
 #else
